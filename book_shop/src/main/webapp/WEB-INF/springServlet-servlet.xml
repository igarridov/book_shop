<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc 
    	http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-4.1.xsd">


    <!-- You can define annotated controller beans explicitly, using a standard 
    Spring bean definition in the dispatcher's context. However, the @Controller 
    stereotype also allows for autodetection, aligned with Spring general support 
    for detecting component classes in the classpath and auto-registering bean 
    definitions for them.
	To enable autodetection of such annotated controllers, you add component scanning 
	to your configuration.  -->
    
    <context:component-scan base-package="org.shop.book.webcontrol" />

	<mvc:annotation-driven />
        
    <!-- Configures the @Controller programming model -->
    <!-- Underneath the covers, Spring MVC delegates to a HttpMessageConverter 
    to perform the serialization. In this case, Spring MVC invokes a 
    MappingJacksonHttpMessageConverter built on the Jackson JSON processor. 
    This implementation is enabled automatically when you use the 
    mvc:annotation-driven configuration element with Jackson present in 
    your classpath. 
    mvc:annotation-driven is not pointless, it's just improperly named. 
    Actually it configures support for new Spring MVC features such as declarative 
    validation with @Valid, HTTP message conversion with @RequestBody/@ResponseBody, 
    new field conversion architecture, etc. 
    (http://blog.springsource.com/2009/12/21/mvc-simplifications-in-spring-3-0/)-->
	
	<!-- Jackson Custom Object Mapper -->
<!-- 	<bean id="customObjectMapper" class="es.gva.san.gaia.commons.util.jackson.CustomObjectMapper" /> -->
	
<!-- 	<mvc:annotation-driven conversion-service="conversionService">  -->
<!-- 		<mvc:message-converters register-defaults="true"> -->
 			<!-- Assign Jackson Custom Object Mapper --> 
<!-- 			<bean class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter"> -->
<!-- 				<property name="objectMapper" ref="customObjectMapper" /> -->
<!-- 			</bean>	 -->
<!-- 		</mvc:message-converters> -->
<!-- 	</mvc:annotation-driven> -->

 	<!-- Spring - Apache Commons File Upload - Multipart Resolver (for upload files!) --> 
<!-- 	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver"> -->
<!--     	one of the properties available; the maximum file size in bytes -->
<!--     	<property name="maxUploadSize" value="5000000" /> -->
<!-- 	</bean> -->
	
 	<!-- Configures the conversion service -->   
 	<!-- http://docs.spring.io/spring/docs/3.2.x/spring-framework-reference/html/validation.html#format-configuring-formatting-mvc --> 
<!-- 	<bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean"> -->
<!-- 		<property name="registerDefaultFormatters" value="false" /> -->
<!-- 		<property name="formatters"> -->
<!-- 			<set> -->
<!-- 				<bean class="org.springframework.format.number.NumberFormatAnnotationFormatterFactory" /> -->
<!-- 			</set> -->
<!-- 		</property> -->
<!-- 		<property name="formatterRegistrars"> -->
<!-- 			<set> -->
<!-- 				<bean class="org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar"> -->
<!-- 					<property name="useIsoFormat" value="true" /> Joda Use ISO Format -->
<!-- 				</bean> -->
<!-- 			</set> -->
<!-- 		</property> -->
<!-- 	</bean> -->

</beans>
